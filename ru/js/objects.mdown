# Объекты

## Parse.Object

Хранение данных на Parse строится вокруг `%{ParseObject}`. Каждый `%{ParseObject}` содержит пары данных «ключ-значение», совместимых с форматом JSON. Эти данные являются бессхемными, то есть не нужно заранее указывать, какие ключи существуют для каждого из объектов `%{ParseObject}`. Вы просто настраиваете необходимые пары «ключ-значение», а наш сервер сохраняет их.

Например, вы отслеживаете рекорды игры. Один `%{ParseObject}` может содержать:

```js
score: 1337, playerName: "Sean Plott", cheatMode: false
```

Ключи представляют собой буквенно-цифровые строки. Значения могут быть строками, числами, логическими значениями и даже массивами и словарями, то есть любыми объектами, которые можно закодировать в JSON.

Каждый `%{ParseObject}` является экземпляром определенного подкласса с названием класса, которое можно использовать, чтобы отличать различные виды данных. Например, можно назвать объект рекордов `GameScore`. Рекомендуем называть классы и ключи, начиная каждое слово с большой буквы (например, NameYourClassesLikeThis и nameYourKeysLikeThis), чтобы ваш код выглядел разборчиво.

Чтобы создать новый подкласс, используйте метод `Parse.Object.extend`.  Любой запрос `%{ParseQuery}` будет возвращать экземпляры нового класса для любого объекта `%{ParseObject}` с таким же названием класса.  Если вы знакомы с `Backbone.Model`, то уже знаете, как использовать объект `%{ParseObject}`.  Это решение разработано для упрощенной замены.

```js
// Simple syntax to create a new subclass of Parse.Object.
var GameScore = Parse.Object.extend("GameScore");

// Create a new instance of that class.
var gameScore = new GameScore();

// Alternatively, you can use the typical Backbone syntax.
var Achievement = Parse.Object.extend({ className: "Achievement" });
```

К подклассам `%{ParseObject}` можно добавить дополнительные методы и свойства.

```js
// A complex subclass of Parse.Object
var Monster = Parse.Object.extend("Monster", {
  // Instance methods
  hasSuperHumanStrength: function () {
    return this.get("strength") > 18;
  },
  // Instance properties go in an initialize method
  initialize: function (attrs, options) {
    this.sound = "Rawr"
  }
}, {
  // Class methods
  spawn: function(strength) {
    var monster = new Monster();
    monster.set("strength", strength);
    return monster;
  }
});

var monster = Monster.spawn(200);
alert(monster.strength());  // Displays 200.
alert(monster.sound); // Displays Rawr.
```

## Сохранение объектов

Например, вы хотите сохранить описанный выше объект `GameScore` в Parse Cloud. Интерфейс похож на `Backbone.Model`, включая метод `save`:

```js
var GameScore = Parse.Object.extend("GameScore");
var gameScore = new GameScore();

gameScore.set("score", 1337);
gameScore.set("playerName", "Sean Plott");
gameScore.set("cheatMode", false);
gameScore.save(null, {
  success: function(gameScore) {
    // Execute any logic that should take place after the object is saved.
    alert('New object created with objectId: ' + gameScore.id);
  },
  error: function(gameScore, error) {
    // Execute any logic that should take place if the save fails.
    // error is a Parse.Error with an error code and message.
    alert('Failed to create new object, with error code: ' + error.description);
  }
});
```

После выполнения этого кода вы, вероятно, захотите проверить результат. Чтобы убедиться, что данные были сохранены, откройте вкладку «Браузер данных» вашего приложения на Parse. Отобразится примерно следующее:

```json
objectId: "xWMyZ4YEGZ", score: 1337, playerName: "Sean Plott", cheatMode: false, createdAt:"2011-06-10T18:33:42Z", updatedAt:"2011-06-10T18:33:42Z"
```

Необходимо обратить внимание на два момента. Перед запуском этого кода не нужно было настраивать новый класс под названием `GameScore`. Приложение Parse само создает этот класс при первом обнаружении.

Также есть несколько полей, не обязательных для заполнения. Они предоставляются для удобства. Поле `objectId` &mdash; это уникальный идентификатор для каждого сохраненного объекта. Поля `createdAt` и `updatedAt` указывают время создания и последнего изменения каждого объекта в облаке. Parse автоматически заполняет каждое из этих полей, поэтому их нет в `%{ParseObject}` до завершения сохранения.

Вместо этого вы можете установить атрибуты непосредственно в вызове `save`.

```js
var GameScore = Parse.Object.extend("GameScore");
var gameScore = new GameScore();
gameScore.save({
  score: 1337,
  playerName: "Sean Plott",
  cheatMode: false
}, {
  success: function(gameScore) {
    // The object was saved successfully.
  },
  error: function(gameScore, error) {
    // The save failed.
    // error is a Parse.Error with an error code and message.
  }
});
```

## Извлечение объектов

Сохранять данные в облаке очень удобно. Также очень удобно извлекать эти данные. Если имеется поле `objectId`, вы можете полностью извлечь объект `%{ParseObject}` при помощи запроса `%{ParseQuery}`:

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.get("xWMyZ4YEGZ", {
  success: function(gameScore) {
    // The object was retrieved successfully.
  },
  error: function(object, error) {
    // The object was not retrieved successfully.
    // error is a Parse.Error with an error code and message.
  }
});
```

Чтобы извлечь значения из объекта `%{ParseObject}`, используйте метод `get`.

```js
var score = gameScore.get("score");
var playerName = gameScore.get("playerName");
var cheatMode = gameScore.get("cheatMode");
```

Три специальных значения предоставляются как свойства:

```js
var objectId = gameScore.id;
var updatedAt = gameScore.updatedAt;
var createdAt = gameScore.createdAt;
```

Если необходимо обновить существующий объект последними данными из Parse Cloud, можно вызвать метод `fetch` следующим образом:

```js
myObject.fetch({
  success: function(myObject)
    // The object was refreshed successfully
  },
  error: function(myObject, error) {
    // The object was not refreshed successfully.
    // error is a Parse.Error with an error code and message.
  }
});
```

## Обновление объектов

Обновление объектов &mdash; это простая операция. Просто установите новые данные для объекта и вызовите один из методов сохранения. Например:

```js
// Create the object.
var GameScore = Parse.Object.extend("GameScore");
var gameScore = new GameScore();
gameScore.set("score", 1337);
gameScore.set("playerName", "Sean Plott");
gameScore.set("cheatMode", false);
gameScore.set("skills", ["pwnage", "flying"]);
gameScore.save(null, {
  success: function(gameScore) {
    // Now let's update it with some new data. In this case, only cheatMode and score
    // will get sent to the cloud. playerName hasn't changed.
    gameScore.set("cheatMode", true);
    gameScore.set("score", 1338);
    gameScore.save();
  }
});
```

Parse автоматически определяет, какие данные были изменены, поэтому в Parse Cloud отправляются только «грязные» поля. Не нужно сжимать данные, которые вы не собираетесь обновлять.

### Счетчики

Приведенный выше пример описывает случай общего использования. Поле &quot;score&quot; («счет») &mdash; это счетчик, в котором содержится постоянно обновляемый счет игрока. Можно использовать указанный выше метод, но он трудоемкий. Он может послужить источником проблем, если несколько клиентов попробуют обновить один и тот же счетчик.

Для хранения данных типа «счетчик» Parse предоставляет методы, которые атомарно увеличивают или уменьшают любое числовое поле. Таким образом, одно и то же обновление можно переписать следующим способом:

```js
gameScore.increment("score");
gameScore.save();
```

Можно также увеличить данные на любую величину, перейдя во втором аргументе к `increment`. Если величина не указана, по умолчанию используется «1».

### Массивы

Для хранения массива данных существуют три операции, которые можно использовать для внесения атомарных изменений в поле массива, связанного с заданным ключом:

*   `add`: добавить заданный объект в конец поля массива.
*   `addUnique`: добавить заданный объект, только если он еще не содержится в поле массива. Нужное положение вставки не гарантируется.
*   `remove`: удалить все экземпляры заданного объекта из поля массива.

Например, можно добавить элементы к настраиваемым полям &quot;skills&quot;:

```js
gameScore.addUnique("skills", "flying");
gameScore.addUnique("skills", "kungfu");
gameScore.save();
```

Обратите внимание, что на данный момент невозможно атомарно добавлять или удалять элементы из массива для одного сохранения. Необходимо вызвать метод `save` между каждой новой операцией массива.

## Удаление объектов

Удаление объекта из облака:

```js
myObject.destroy({
  success: function(myObject) {
    // The object was deleted from the Parse Cloud.
  },
  error: function(myObject, error) {
    // The delete failed.
    // error is a Parse.Error with an error code and message.
  }
});
```

Одиночное поле можно удалить из объекта при помощи метода `unset`:

```js
// After this, the playerName field will be empty
myObject.unset("playerName");
// Saves the field deletion to the Parse Cloud
myObject.save();
```

Мы рекомендуем не использовать object.set("null") для удаления поля из объекта.

## Реляционные данные

Объекты могут иметь связь с другими объектами. Например, в блоговых приложениях публикация `Post` может включать несколько объектов `Comment`. Parse поддерживает все виды связей, в том числе «один-к-одному», «один-ко-многим» и «многие-ко-многим».

### Связи «один-к-одному» и «один-ко-многим»

Связи «один-к-одному» и «один-ко-многим» можно моделировать, сохраняя `%{ParseObject}` как значение в другом объекте. Например, каждый объект `Comment` в приложении для блогов может соответствовать одному объекту `Post`.

Чтобы создать новый объект `Post` с одним объектом `Comment`, можно написать следующий код:

```js
  // Declare the types.
  var Post = Parse.Object.extend("Post");
  var Comment = Parse.Object.extend("Comment");

  // Create the post var myPost = new Post();
  myPost.set("title", "I'm Hungry");
  myPost.set("content", "Where should we go for lunch?");

  // Create the comment var myComment = new Comment();
  myComment.set("content", "Let's do Sushirrito.");

  // Add the post as a value in the comment
  myComment.set("parent", myPost);

  // This will save both myPost and myComment
  myComment.save();
```

Чтобы сохранить последовательность, на внутреннем уровне программа Parse будет сохранять нужный объект только в одном месте. Объекты можно также связывать, просто используя их идентификаторы `objectId` следующим образом:

```js
var post = new Post();
post.id = "1zEcyElZ80";
myComment.set("parent", post);
```

По умолчанию при извлечении объекта связанные объекты `%{ParseObject}` не извлекаются.  Эти значения объектов невозможно извлечь, пока они не будут получены следующим образом:

```js
var post = fetchedComment.get("parent");
post.fetch({
  success: function(post) {
    var title = post.get("title");
  }
});
```

### Связи «многие-ко-многим»

Связи «многие-ко-многим» создаются с помощью `%{ParseRelation}`. Подобным образом работает сохранение массива `%{ParseObject}` в ключе, при этом нет необходимости извлекать все объекты в связи сразу.  Кроме того, такой способ позволяет `%{ParseRelation}` изменять масштаб для большего количества объектов, чем в массиве с подходом `%{ParseObject}`.  Например, у пользователя `User` может быть много объектов `Posts`, которые его интересуют. В этом случае можно хранить набор публикаций `Posts`, которые отмечены пользователем `User`, при помощи метода `relation`.  Чтобы добавить публикацию `Post` к списку материалов, понравившихся пользователю `User`, можно выполнить следующее:

```js
var user = Parse.User.current();
var relation = user.relation("likes");
relation.add(post);
user.save();
```

Можно удалить публикацию из `%{ParseRelation}`:

```js
relation.remove(post);
user.save();
```

Можно вызвать `add` и `remove` несколько раз до вызова сохранения:

```js
relation.remove(post1);
relation.remove(post2);
user.save();
```

Можно также перейти в массиве `%{ParseObject}` к `add` и `remove`:

```js
relation.add([post1, post2, post3]);
user.save();
```

По умолчанию список объектов в этой связи не загружается.  Список публикаций, понравившихся пользователю, можно получить с помощью `%{ParseQuery}`, возвращенного `query`.  Код выглядит следующим образом:

```js
relation.query().find({
  success: function(list) {
    // list contains the posts that the current user likes.
  }
});
```

Если нужно получить только подгруппу публикаций, можно добавить дополнительные ограничения к `%{ParseQuery}`, возвращенному подобным запросом:

```js
var query = relation.query();
query.equalTo("title", "I'm Hungry");
query.find({
  success:function(list) {
    // list contains post liked by the current user which have the title "I'm Hungry".
  }
});
```

Более подробную информацию о запросе `%{ParseQuery}` можно узнать в разделе о запросах данного руководства. С точки зрения запросов, поведение `%{ParseRelation}` подобно поведению массива `%{ParseObject}`, поэтому любой запрос, который можно выполнить на массиве объектов, можно выполнить и на `%{ParseRelation}`.

## Типы данных

Выше использовались значения с типами `String`, `Number` и `%{ParseObject}`. Parse также поддерживает JavaScript `Date` и `null`.

Можно вкладывать JavaScript `Object` и JavaScript `Array` для хранения более структурированных данных в пределах одного `%{ParseObject}`.

Ниже несколько примеров:

```js
var number = 42;
var string = "the number is " + number;
var date = new Date();
var array = [string, number];
var object = { number: number, string: string };

var BigObject = Parse.Object.extend("BigObject");
var bigObject = new BigObject();
bigObject.set("myNumber", number);
bigObject.set("myString", string);
bigObject.set("myDate", date);
bigObject.set("myArray", array);
bigObject.set("myObject", object);
bigObject.set("myNull", null);
bigObject.save();
```

Размер `%{ParseObject}` не должен превышать 128 килобайт.

Для получения дополнительных сведений по обработке данных в Parse ознакомьтесь с нашей документацией в разделе [Данные и безопасность](#data).
